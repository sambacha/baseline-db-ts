/* tslint:disable */
/* eslint-disable */
/**
 * merkle-tree
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * MetaDataApi - axios parameter creator
 * @export
 */
export const MetaDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * inserts a leaf object
         * @summary /metadata/contractAddress -> gets the contractAddress
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractAddressgetsthecontractAddress: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling metadatacontractAddressgetsthecontractAddress.');
            }
            const localVarPath = `/metadata/contractAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/contractAddress -> inserts the contract address of the tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractAddressinsertsthecontractaddressofthetree: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/contractAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/contractInterface -> gets the contractInterface
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractInterfacegetsthecontractInterface: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling metadatacontractInterfacegetsthecontractInterface.');
            }
            const localVarPath = `/metadata/contractInterface`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/contractInterface -> inserts the contract address of the tree
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractInterfaceinsertsthecontractaddressofthetree: async (body: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling metadatacontractInterfaceinsertsthecontractaddressofthetree.');
            }
            const localVarPath = `/metadata/contractInterface`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /metadata -> gets the tree's metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatagetsthetreesmetadataobject: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling metadatagetsthetreesmetadataobject.');
            }
            const localVarPath = `/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> get the latestLeaf metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestLeafgetthelatestLeafmetadataobject: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling metadatalatestLeafgetthelatestLeafmetadataobject.');
            }
            const localVarPath = `/metadata/latestLeaf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> updates the latestLeaf metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestLeafupdatesthelatestLeafmetadataobject: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/latestLeaf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> gets the latestRecalculation metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestRecalculationgetsthelatestRecalculationmetadataobject: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling metadatalatestRecalculationgetsthelatestRecalculationmetadataobject.');
            }
            const localVarPath = `/metadata/latestRecalculation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> updates the latestRecalculation metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/latestRecalculation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/treeHeight -> establishes the treeHeight for a db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatatreeHeightestablishesthetreeHeightforadb: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/treeHeight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaDataApi - functional programming interface
 * @export
 */
export const MetaDataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * inserts a leaf object
         * @summary /metadata/contractAddress -> gets the contractAddress
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatacontractAddressgetsthecontractAddress(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatacontractAddressgetsthecontractAddress(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/contractAddress -> inserts the contract address of the tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatacontractAddressinsertsthecontractaddressofthetree(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatacontractAddressinsertsthecontractaddressofthetree(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/contractInterface -> gets the contractInterface
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatacontractInterfacegetsthecontractInterface(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatacontractInterfacegetsthecontractInterface(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/contractInterface -> inserts the contract address of the tree
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatacontractInterfaceinsertsthecontractaddressofthetree(body: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatacontractInterfaceinsertsthecontractaddressofthetree(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /metadata -> gets the tree's metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatagetsthetreesmetadataobject(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatagetsthetreesmetadataobject(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> get the latestLeaf metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatalatestLeafgetthelatestLeafmetadataobject(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatalatestLeafgetthelatestLeafmetadataobject(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> updates the latestLeaf metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatalatestLeafupdatesthelatestLeafmetadataobject(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatalatestLeafupdatesthelatestLeafmetadataobject(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> gets the latestRecalculation metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> updates the latestRecalculation metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a node object
         * @summary /metadata/treeHeight -> establishes the treeHeight for a db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadatatreeHeightestablishesthetreeHeightforadb(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaDataApiAxiosParamCreator(configuration).metadatatreeHeightestablishesthetreeHeightforadb(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetaDataApi - factory interface
 * @export
 */
export const MetaDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * inserts a leaf object
         * @summary /metadata/contractAddress -> gets the contractAddress
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractAddressgetsthecontractAddress(contentType: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatacontractAddressgetsthecontractAddress(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a node object
         * @summary /metadata/contractAddress -> inserts the contract address of the tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractAddressinsertsthecontractaddressofthetree(options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatacontractAddressinsertsthecontractaddressofthetree(options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /metadata/contractInterface -> gets the contractInterface
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractInterfacegetsthecontractInterface(contentType: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatacontractInterfacegetsthecontractInterface(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a node object
         * @summary /metadata/contractInterface -> inserts the contract address of the tree
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatacontractInterfaceinsertsthecontractaddressofthetree(body: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatacontractInterfaceinsertsthecontractaddressofthetree(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /metadata -> gets the tree's metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatagetsthetreesmetadataobject(contentType: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatagetsthetreesmetadataobject(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> get the latestLeaf metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestLeafgetthelatestLeafmetadataobject(contentType: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatalatestLeafgetthelatestLeafmetadataobject(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestLeaf -> updates the latestLeaf metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestLeafupdatesthelatestLeafmetadataobject(options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatalatestLeafupdatesthelatestLeafmetadataobject(options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> gets the latestRecalculation metadata object
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType: string, options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /metadata/latestRecalculation -> updates the latestRecalculation metadata object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a node object
         * @summary /metadata/treeHeight -> establishes the treeHeight for a db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatatreeHeightestablishesthetreeHeightforadb(options?: any): AxiosPromise<void> {
            return MetaDataApiFp(configuration).metadatatreeHeightestablishesthetreeHeightforadb(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetaDataApi - object-oriented interface
 * @export
 * @class MetaDataApi
 * @extends {BaseAPI}
 */
export class MetaDataApi extends BaseAPI {
    /**
     * inserts a leaf object
     * @summary /metadata/contractAddress -> gets the contractAddress
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatacontractAddressgetsthecontractAddress(contentType: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatacontractAddressgetsthecontractAddress(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a node object
     * @summary /metadata/contractAddress -> inserts the contract address of the tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatacontractAddressinsertsthecontractaddressofthetree(options?: any) {
        return MetaDataApiFp(this.configuration).metadatacontractAddressinsertsthecontractaddressofthetree(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /metadata/contractInterface -> gets the contractInterface
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatacontractInterfacegetsthecontractInterface(contentType: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatacontractInterfacegetsthecontractInterface(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a node object
     * @summary /metadata/contractInterface -> inserts the contract address of the tree
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatacontractInterfaceinsertsthecontractaddressofthetree(body: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatacontractInterfaceinsertsthecontractaddressofthetree(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /metadata -> gets the tree's metadata object
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatagetsthetreesmetadataobject(contentType: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatagetsthetreesmetadataobject(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /metadata/latestLeaf -> get the latestLeaf metadata object
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatalatestLeafgetthelatestLeafmetadataobject(contentType: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatalatestLeafgetthelatestLeafmetadataobject(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /metadata/latestLeaf -> updates the latestLeaf metadata object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatalatestLeafupdatesthelatestLeafmetadataobject(options?: any) {
        return MetaDataApiFp(this.configuration).metadatalatestLeafupdatesthelatestLeafmetadataobject(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /metadata/latestRecalculation -> gets the latestRecalculation metadata object
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType: string, options?: any) {
        return MetaDataApiFp(this.configuration).metadatalatestRecalculationgetsthelatestRecalculationmetadataobject(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /metadata/latestRecalculation -> updates the latestRecalculation metadata object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options?: any) {
        return MetaDataApiFp(this.configuration).metadatalatestRecalculationupdatesthelatestRecalculationmetadataobject(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a node object
     * @summary /metadata/treeHeight -> establishes the treeHeight for a db
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaDataApi
     */
    public metadatatreeHeightestablishesthetreeHeightforadb(options?: any) {
        return MetaDataApiFp(this.configuration).metadatatreeHeightestablishesthetreeHeightforadb(options).then((request) => request(this.axios, this.basePath));
    }
}
