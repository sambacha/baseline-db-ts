/* tslint:disable */
/* eslint-disable */
/**
 * merkle-tree
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * LeafApi - axios parameter creator
 * @export
 */
export const LeafApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /leaf/:leafIndex -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafLeafIndexgetsaleafatleafIndex: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leafLeafIndexgetsaleafatleafIndex.');
            }
            const localVarPath = `/leaf/index/100`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /leaf/index -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafindexgetsaleafatleafIndex: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leafindexgetsaleafatleafIndex.');
            }
            const localVarPath = `/leaf/index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * inserts a leaf object
         * @summary /leaf -> inserts a leaf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafinsertsaleafobject: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/leaf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /leaf/value -> gets a leaf with a given value
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafvaluegetsaleafwithagivenvalue: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leafvaluegetsaleafwithagivenvalue.');
            }
            const localVarPath = `/leaf/value`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /leaves/check -> check for missing leaves
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavescheckcheckformissingleaves: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leavescheckcheckformissingleaves.');
            }
            const localVarPath = `/leaves/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /leaves/count -> count the number of leaves in the db
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavescountcountthenumberofleavesinthedb: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leavescountcountthenumberofleavesinthedb.');
            }
            const localVarPath = `/leaves/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /leaves -> get leaves by array of indices
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavesgetleavesbyarrayofindices: async (contentType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling leavesgetleavesbyarrayofindices.');
            }
            const localVarPath = `/leaves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * {   \"value\": \"0xabc123-0\",   \"leafIndex\": 0,   \"blockNumber\": 60000000  },  {   \"value\": \"0xabc123-2\",   \"leafIndex\": 2,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 3,   \"blockNumber\": 60000000  },   {   \"value\": \"0xabc123-2\",   \"leafIndex\": 7,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 8,   \"blockNumber\": 60000000  },
         * @summary /leaves -> inserts many leaf objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavesinsertsmanyleafobjects: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/leaves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeafApi - functional programming interface
 * @export
 */
export const LeafApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /leaf/:leafIndex -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leafLeafIndexgetsaleafatleafIndex(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leafLeafIndexgetsaleafatleafIndex(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /leaf/index -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leafindexgetsaleafatleafIndex(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leafindexgetsaleafatleafIndex(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * inserts a leaf object
         * @summary /leaf -> inserts a leaf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leafinsertsaleafobject(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leafinsertsaleafobject(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /leaf/value -> gets a leaf with a given value
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leafvaluegetsaleafwithagivenvalue(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leafvaluegetsaleafwithagivenvalue(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /leaves/check -> check for missing leaves
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leavescheckcheckformissingleaves(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leavescheckcheckformissingleaves(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /leaves/count -> count the number of leaves in the db
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leavescountcountthenumberofleavesinthedb(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leavescountcountthenumberofleavesinthedb(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /leaves -> get leaves by array of indices
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leavesgetleavesbyarrayofindices(contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leavesgetleavesbyarrayofindices(contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * {   \"value\": \"0xabc123-0\",   \"leafIndex\": 0,   \"blockNumber\": 60000000  },  {   \"value\": \"0xabc123-2\",   \"leafIndex\": 2,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 3,   \"blockNumber\": 60000000  },   {   \"value\": \"0xabc123-2\",   \"leafIndex\": 7,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 8,   \"blockNumber\": 60000000  },
         * @summary /leaves -> inserts many leaf objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leavesinsertsmanyleafobjects(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LeafApiAxiosParamCreator(configuration).leavesinsertsmanyleafobjects(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LeafApi - factory interface
 * @export
 */
export const LeafApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary /leaf/:leafIndex -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafLeafIndexgetsaleafatleafIndex(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leafLeafIndexgetsaleafatleafIndex(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /leaf/index -> gets a leaf at leafIndex
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafindexgetsaleafatleafIndex(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leafindexgetsaleafatleafIndex(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * inserts a leaf object
         * @summary /leaf -> inserts a leaf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafinsertsaleafobject(options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leafinsertsaleafobject(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /leaf/value -> gets a leaf with a given value
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leafvaluegetsaleafwithagivenvalue(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leafvaluegetsaleafwithagivenvalue(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /leaves/check -> check for missing leaves
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavescheckcheckformissingleaves(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leavescheckcheckformissingleaves(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /leaves/count -> count the number of leaves in the db
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavescountcountthenumberofleavesinthedb(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leavescountcountthenumberofleavesinthedb(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /leaves -> get leaves by array of indices
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavesgetleavesbyarrayofindices(contentType: string, options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leavesgetleavesbyarrayofindices(contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * {   \"value\": \"0xabc123-0\",   \"leafIndex\": 0,   \"blockNumber\": 60000000  },  {   \"value\": \"0xabc123-2\",   \"leafIndex\": 2,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 3,   \"blockNumber\": 60000000  },   {   \"value\": \"0xabc123-2\",   \"leafIndex\": 7,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 8,   \"blockNumber\": 60000000  },
         * @summary /leaves -> inserts many leaf objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leavesinsertsmanyleafobjects(options?: any): AxiosPromise<void> {
            return LeafApiFp(configuration).leavesinsertsmanyleafobjects(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeafApi - object-oriented interface
 * @export
 * @class LeafApi
 * @extends {BaseAPI}
 */
export class LeafApi extends BaseAPI {
    /**
     * 
     * @summary /leaf/:leafIndex -> gets a leaf at leafIndex
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leafLeafIndexgetsaleafatleafIndex(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leafLeafIndexgetsaleafatleafIndex(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /leaf/index -> gets a leaf at leafIndex
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leafindexgetsaleafatleafIndex(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leafindexgetsaleafatleafIndex(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * inserts a leaf object
     * @summary /leaf -> inserts a leaf object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leafinsertsaleafobject(options?: any) {
        return LeafApiFp(this.configuration).leafinsertsaleafobject(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /leaf/value -> gets a leaf with a given value
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leafvaluegetsaleafwithagivenvalue(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leafvaluegetsaleafwithagivenvalue(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /leaves/check -> check for missing leaves
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leavescheckcheckformissingleaves(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leavescheckcheckformissingleaves(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /leaves/count -> count the number of leaves in the db
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leavescountcountthenumberofleavesinthedb(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leavescountcountthenumberofleavesinthedb(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary /leaves -> get leaves by array of indices
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leavesgetleavesbyarrayofindices(contentType: string, options?: any) {
        return LeafApiFp(this.configuration).leavesgetleavesbyarrayofindices(contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * {   \"value\": \"0xabc123-0\",   \"leafIndex\": 0,   \"blockNumber\": 60000000  },  {   \"value\": \"0xabc123-2\",   \"leafIndex\": 2,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 3,   \"blockNumber\": 60000000  },   {   \"value\": \"0xabc123-2\",   \"leafIndex\": 7,   \"blockNumber\": 60000003  },  {   \"value\": \"0xabc123-3\",   \"leafIndex\": 8,   \"blockNumber\": 60000000  },
     * @summary /leaves -> inserts many leaf objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeafApi
     */
    public leavesinsertsmanyleafobjects(options?: any) {
        return LeafApiFp(this.configuration).leavesinsertsmanyleafobjects(options).then((request) => request(this.axios, this.basePath));
    }
}
